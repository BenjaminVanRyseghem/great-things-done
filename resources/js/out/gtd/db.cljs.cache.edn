;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name gtd.db, :imports nil, :requires {fs node.fs, platform gtd.platform, node.fs node.fs, gtd.platform gtd.platform, utils.keychain utils.keychain, keychain utils.keychain, utils utils.core, utils.core utils.core, crypto gtd.crypto, gtd.crypto gtd.crypto}, :uses nil, :defs {encrypt-task {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/db.cljs", :line 8, :column 8, :end-line 8, :end-column 20, :private true, :arglists (quote ([task]))}, :private true, :name gtd.db/encrypt-task, :variadic false, :file "src/gtd/db.cljs", :end-column 20, :method-params ([task]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([task]))}, ensure-project {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/db.cljs", :line 114, :column 7, :end-line 114, :end-column 21, :arglists (quote ([project]))}, :name gtd.db/ensure-project, :variadic false, :file "src/gtd/db.cljs", :end-column 21, :method-params ([project]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([project]))}, decrypt-task {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/db.cljs", :line 16, :column 8, :end-line 16, :end-column 20, :private true, :arglists (quote ([encrypted-string]))}, :private true, :name gtd.db/decrypt-task, :variadic false, :file "src/gtd/db.cljs", :end-column 20, :method-params ([encrypted-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([encrypted-string]))}, ensure-structure {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/db.cljs", :line 107, :column 7, :end-line 107, :end-column 23, :arglists (quote ([]))}, :name gtd.db/ensure-structure, :variadic false, :file "src/gtd/db.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, deserialize-task {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/db.cljs", :line 24, :column 7, :end-line 24, :end-column 23, :arglists (quote ([path task-id & [callback]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(path task-id [callback])], :arglists ([path task-id & [callback]]), :arglists-meta (nil)}}, :name gtd.db/deserialize-task, :variadic true, :file "src/gtd/db.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(path task-id [callback])], :arglists ([path task-id & [callback]]), :arglists-meta (nil)}, :method-params [(path task-id [callback])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists ([path task-id & [callback]])}, serialize-project! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/db.cljs", :line 75, :column 7, :end-line 75, :end-column 25, :arglists (quote ([project]))}, :name gtd.db/serialize-project!, :variadic false, :file "src/gtd/db.cljs", :end-column 25, :method-params ([project]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([project]))}, rename-project! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/db.cljs", :line 87, :column 7, :end-line 87, :end-column 22, :arglists (quote ([project old-id]))}, :name gtd.db/rename-project!, :variadic false, :file "src/gtd/db.cljs", :end-column 22, :method-params ([project old-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([project old-id]))}, remove-task! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/db.cljs", :line 97, :column 7, :end-line 97, :end-column 19, :arglists (quote ([task])), :doc "Remove old file in old project"}, :name gtd.db/remove-task!, :variadic false, :file "src/gtd/db.cljs", :end-column 19, :method-params ([task]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([task])), :doc "Remove old file in old project"}, deserialize-project {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/db.cljs", :line 41, :column 7, :end-line 41, :end-column 26, :arglists (quote ([path & [callback]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [callback])], :arglists ([path & [callback]]), :arglists-meta (nil)}}, :name gtd.db/deserialize-project, :variadic true, :file "src/gtd/db.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [callback])], :arglists ([path & [callback]]), :arglists-meta (nil)}, :method-params [(path [callback])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists ([path & [callback]])}, serialize-task! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/db.cljs", :line 58, :column 7, :end-line 58, :end-column 22, :arglists (quote ([task]))}, :name gtd.db/serialize-task!, :variadic false, :file "src/gtd/db.cljs", :end-column 22, :method-params ([task]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([task]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:tasks :project :id}, :order [:project :id :tasks]}, :doc nil}