;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name gtd.state, :imports nil, :requires {uuid cljs-uuid-utils.core, cljs-uuid-utils.core cljs-uuid-utils.core, string cuerdas.core, cuerdas.core cuerdas.core, db gtd.db, gtd.db gtd.db}, :uses nil, :defs {update-task! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 246, :column 7, :end-line 246, :end-column 19, :arglists (quote ([task & body])), :doc "This function is thought in the way only one property is changed at a time", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(task body)], :arglists ([task & body]), :arglists-meta (nil)}}, :name gtd.state/update-task!, :variadic true, :file "src/gtd/state.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(task body)], :arglists ([task & body]), :arglists-meta (nil)}, :method-params [(task body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists ([task & body]), :doc "This function is thought in the way only one property is changed at a time"}, store-project! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 92, :column 8, :end-line 92, :end-column 22, :private true, :arglists (quote ([project]))}, :private true, :name gtd.state/store-project!, :variadic false, :file "src/gtd/state.cljs", :end-column 22, :method-params ([project]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([project]))}, all-projects {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 193, :column 7, :end-line 193, :end-column 19, :arglists (quote ([]))}, :name gtd.state/all-projects, :variadic false, :file "src/gtd/state.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, new-task {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 148, :column 8, :end-line 148, :end-column 16, :private true, :arglists (quote ([task-name project parent tags tasks description remind-date due-date show-before repeating done]))}, :private true, :name gtd.state/new-task, :variadic false, :file "src/gtd/state.cljs", :end-column 16, :method-params ([task-name project parent tags tasks description remind-date due-date show-before repeating done]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 11, :fn-var true, :arglists (quote ([task-name project parent tags tasks description remind-date due-date show-before repeating done]))}, store-task! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 78, :column 8, :end-line 78, :end-column 19, :private true, :arglists (quote ([task]))}, :private true, :name gtd.state/store-task!, :variadic false, :file "src/gtd/state.cljs", :end-column 19, :method-params ([task]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([task]))}, new-project {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 176, :column 8, :end-line 176, :end-column 19, :private true, :arglists (quote ([project-name tags tasks description due-date active done]))}, :private true, :name gtd.state/new-project, :variadic false, :file "src/gtd/state.cljs", :end-column 19, :method-params ([project-name tags tasks description due-date active done]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 7, :fn-var true, :arglists (quote ([project-name tags tasks description due-date active done]))}, load-task! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 336, :column 7, :end-line 336, :end-column 17, :arglists (quote ([task]))}, :name gtd.state/load-task!, :variadic false, :file "src/gtd/state.cljs", :end-column 17, :method-params ([task]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 336, :end-line 336, :max-fixed-arity 1, :fn-var true, :arglists (quote ([task]))}, active-tasks {:name gtd.state/active-tasks, :file "src/gtd/state.cljs", :line 17, :column 1, :end-line 17, :end-column 32, :private true, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 17, :column 20, :end-line 17, :end-column 32, :private true}}, normalize-path {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 41, :column 8, :end-line 41, :end-column 22, :private true, :arglists (quote ([path]))}, :private true, :name gtd.state/normalize-path, :variadic false, :file "src/gtd/state.cljs", :end-column 22, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, generate-uuid {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 33, :column 8, :end-line 33, :end-column 21, :private true, :arglists (quote ([]))}, :private true, :name gtd.state/generate-uuid, :variadic false, :file "src/gtd/state.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, projects {:name gtd.state/projects, :file "src/gtd/state.cljs", :line 13, :column 1, :end-line 13, :end-column 18, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 13, :column 10, :end-line 13, :end-column 18}}, tags {:name gtd.state/tags, :file "src/gtd/state.cljs", :line 20, :column 1, :end-line 20, :end-column 24, :private true, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 20, :column 20, :end-line 20, :end-column 24, :private true}}, get-task-by-id {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 128, :column 7, :end-line 128, :end-column 21, :arglists (quote ([id]))}, :name gtd.state/get-task-by-id, :variadic false, :file "src/gtd/state.cljs", :end-column 21, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, active-projects {:name gtd.state/active-projects, :file "src/gtd/state.cljs", :line 14, :column 1, :end-line 14, :end-column 35, :private true, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 14, :column 20, :end-line 14, :end-column 35, :private true}}, inbox {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 189, :column 7, :end-line 189, :end-column 12, :arglists (quote ([]))}, :name gtd.state/inbox, :variadic false, :file "src/gtd/state.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, list-of-projects {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 346, :column 16, :end-line 346, :end-column 32, :export true, :arglists (quote ([]))}, :name gtd.state/list-of-projects, :variadic false, :file "src/gtd/state.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 346, :end-line 346, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, meta-projects {:name gtd.state/meta-projects, :file "src/gtd/state.cljs", :line 12, :column 1, :end-line 12, :end-column 33, :private true, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 12, :column 20, :end-line 12, :end-column 33, :private true}}, register-project {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 230, :column 7, :end-line 230, :end-column 23, :arglists (quote ([project-name & {:keys [tags tasks description due-date active], :or {tags [], tasks [], description "", due-date nil, active true}}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(project-name {:keys [tags tasks description due-date active], :or {tags [], tasks [], description "", due-date nil, active true}})], :arglists ([project-name & {:keys [tags tasks description due-date active], :or {tags [], tasks [], description "", due-date nil, active true}}]), :arglists-meta (nil)}}, :name gtd.state/register-project, :variadic true, :file "src/gtd/state.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(project-name {:keys [tags tasks description due-date active], :or {tags [], tasks [], description "", due-date nil, active true}})], :arglists ([project-name & {:keys [tags tasks description due-date active], :or {tags [], tasks [], description "", due-date nil, active true}}]), :arglists-meta (nil)}, :method-params [(project-name {:keys [tags tasks description due-date active], :or {tags [], tasks [], description "", due-date nil, active true}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 1, :fn-var true, :arglists ([project-name & {:keys [tags tasks description due-date active], :or {tags [], tasks [], description "", due-date nil, active true}}])}, get-parent {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 103, :column 8, :end-line 103, :end-column 18, :private true, :arglists (quote ([task]))}, :private true, :name gtd.state/get-parent, :variadic false, :file "src/gtd/state.cljs", :end-column 18, :method-params ([task]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([task]))}, install-entity! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 121, :column 8, :end-line 121, :end-column 23, :private true, :arglists (quote ([entity]))}, :private true, :name gtd.state/install-entity!, :variadic false, :file "src/gtd/state.cljs", :end-column 23, :method-params ([entity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([entity]))}, register-task {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 204, :column 7, :end-line 204, :end-column 20, :arglists (quote ([task-name {:keys [project parent tags tasks description remind-date due-date show-before repeating], :or {description "", tags [], parent (inbox), show-before 0, remind-date nil, tasks [], project (inbox), due-date nil, repeating false}}]))}, :name gtd.state/register-task, :variadic false, :file "src/gtd/state.cljs", :end-column 20, :method-params ([task-name p__22818]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 2, :fn-var true, :arglists (quote ([task-name {:keys [project parent tags tasks description remind-date due-date show-before repeating], :or {description "", tags [], parent (inbox), show-before 0, remind-date nil, tasks [], project (inbox), due-date nil, repeating false}}]))}, load-project! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 332, :column 7, :end-line 332, :end-column 20, :arglists (quote ([project]))}, :name gtd.state/load-project!, :variadic false, :file "src/gtd/state.cljs", :end-column 20, :method-params ([project]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 332, :end-line 332, :max-fixed-arity 1, :fn-var true, :arglists (quote ([project]))}, now-as-milliseconds {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 53, :column 8, :end-line 53, :end-column 27, :private true, :arglists (quote ([])), :doc "Return the current time as a string"}, :private true, :name gtd.state/now-as-milliseconds, :variadic false, :file "src/gtd/state.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return the current time as a string"}, install-project {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 115, :column 8, :end-line 115, :end-column 23, :private true, :arglists (quote ([project]))}, :private true, :name gtd.state/install-project, :variadic false, :file "src/gtd/state.cljs", :end-column 23, :method-params ([project]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([project]))}, is-task {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 66, :column 8, :end-line 66, :end-column 15, :private true, :arglists (quote ([entity]))}, :private true, :name gtd.state/is-task, :variadic false, :file "src/gtd/state.cljs", :end-column 15, :method-params ([entity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([entity]))}, tasks {:name gtd.state/tasks, :file "src/gtd/state.cljs", :line 16, :column 1, :end-line 16, :end-column 25, :private true, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 16, :column 20, :end-line 16, :end-column 25, :private true}}, install-task {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 109, :column 8, :end-line 109, :end-column 20, :private true, :arglists (quote ([task]))}, :private true, :name gtd.state/install-task, :variadic false, :file "src/gtd/state.cljs", :end-column 20, :method-params ([task]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([task]))}, build-id {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 47, :column 8, :end-line 47, :end-column 16, :private true, :arglists (quote ([entity-name]))}, :private true, :name gtd.state/build-id, :variadic false, :file "src/gtd/state.cljs", :end-column 16, :method-params ([entity-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([entity-name]))}, update-project! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 314, :column 7, :end-line 314, :end-column 22, :arglists (quote ([project & body])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(project body)], :arglists ([project & body]), :arglists-meta (nil)}}, :name gtd.state/update-project!, :variadic true, :file "src/gtd/state.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(project body)], :arglists ([project & body]), :arglists-meta (nil)}, :method-params [(project body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 1, :fn-var true, :arglists ([project & body])}, completion-for {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 340, :column 7, :end-line 340, :end-column 21, :arglists (quote ([project]))}, :name gtd.state/completion-for, :variadic false, :file "src/gtd/state.cljs", :end-column 21, :method-params ([project]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 340, :end-line 340, :max-fixed-arity 1, :fn-var true, :arglists (quote ([project]))}, completed-tasks {:name gtd.state/completed-tasks, :file "src/gtd/state.cljs", :line 19, :column 1, :end-line 19, :end-column 35, :private true, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 19, :column 20, :end-line 19, :end-column 35, :private true}}, task-types {:name gtd.state/task-types, :file "src/gtd/state.cljs", :line 6, :column 1, :end-line 6, :end-column 26, :private true, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 6, :column 16, :end-line 6, :end-column 26, :private true}}, is-project {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 62, :column 8, :end-line 62, :end-column 18, :private true, :arglists (quote ([entity]))}, :private true, :name gtd.state/is-project, :variadic false, :file "src/gtd/state.cljs", :end-column 18, :method-params ([entity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([entity]))}, completed-projects {:name gtd.state/completed-projects, :file "src/gtd/state.cljs", :line 15, :column 1, :end-line 15, :end-column 38, :private true, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 15, :column 20, :end-line 15, :end-column 38, :private true}}, repeating-tasks {:name gtd.state/repeating-tasks, :file "src/gtd/state.cljs", :line 18, :column 1, :end-line 18, :end-column 35, :private true, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 18, :column 20, :end-line 18, :end-column 35, :private true}}, register-entity-in {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 58, :column 8, :end-line 58, :end-column 26, :private true, :arglists (quote ([entity atom-map]))}, :private true, :name gtd.state/register-entity-in, :variadic false, :file "src/gtd/state.cljs", :end-column 26, :method-params ([entity atom-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([entity atom-map]))}, register-tags! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 70, :column 8, :end-line 70, :end-column 22, :private true, :arglists (quote ([entry entry-type]))}, :private true, :name gtd.state/register-tags!, :variadic false, :file "src/gtd/state.cljs", :end-column 22, :method-params ([entry entry-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([entry entry-type]))}, inbox-project {:name gtd.state/inbox-project, :file "src/gtd/state.cljs", :line 22, :column 1, :end-line 22, :end-column 33, :private true, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 22, :column 20, :end-line 22, :end-column 33, :private true}}, get-project-by-id {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 132, :column 7, :end-line 132, :end-column 24, :arglists (quote ([id]))}, :name gtd.state/get-project-by-id, :variadic false, :file "src/gtd/state.cljs", :end-column 24, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, all-tasks {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/gtd/state.cljs", :line 200, :column 7, :end-line 200, :end-column 16, :arglists (quote ([]))}, :name gtd.state/all-tasks, :variadic false, :file "src/gtd/state.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:description :projects :tags :done :parent :show-before :name :type :remind-date :tasks :total :project :active :id :due-date :creation-date :repeating}, :order [:description :tags :done :name :type :tasks :active :id :due-date :creation-date :projects :repeating :parent :project :show-before :remind-date :total]}, :doc nil}