;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{contains? reverse empty? replace chars repeat}, :name cuerdas.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, clojure.set clojure.set, gstr goog.string, goog.string goog.string}, :uses {map-invert clojure.set}, :defs {lstrip {:name cuerdas.core/lstrip, :file "resources/js/out/cuerdas/core.cljs", :line 215, :column 1, :end-line 215, :end-column 12, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 215, :column 6, :end-line 215, :end-column 12}}, titleize {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 496, :column 7, :end-line 496, :end-column 15, :arglists (quote ([s] [s delimiters])), :doc "Converts a string into TitleCase.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s delimiters]), :arglists ([s] [s delimiters]), :arglists-meta (nil nil)}}, :name cuerdas.core/titleize, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s delimiters]), :arglists ([s] [s delimiters]), :arglists-meta (nil nil)}, :method-params ([s] [s delimiters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 496, :end-line 496, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s delimiters]), :doc "Converts a string into TitleCase."}, ends-with? {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 61, :column 7, :end-line 61, :end-column 17, :arglists (quote ([s suffix])), :doc "Check if the string ends with suffix."}, :name cuerdas.core/ends-with?, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 17, :method-params ([s suffix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s suffix])), :doc "Check if the string ends with suffix."}, contains? {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 32, :column 7, :end-line 32, :end-column 16, :arglists (quote ([s subs])), :doc "Determines whether a string contains a substring."}, :name cuerdas.core/contains?, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 16, :method-params ([s subs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s subs])), :doc "Determines whether a string contains a substring."}, collapse-whitespace {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 86, :column 7, :end-line 86, :end-column 26, :arglists (quote ([s])), :doc "Converts all adjacent whitespace characters\n  to a single space."}, :name cuerdas.core/collapse-whitespace, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 26, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts all adjacent whitespace characters\n  to a single space."}, html-escape-chars {:name cuerdas.core/html-escape-chars, :file "resources/js/out/cuerdas/core.cljs", :line 336, :column 1, :end-line 336, :end-column 23, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 336, :column 6, :end-line 336, :end-column 23}}, capitalize {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 451, :column 7, :end-line 451, :end-column 17, :arglists (quote ([s])), :doc "Converts first letter of the string to uppercase."}, :name cuerdas.core/capitalize, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 451, :end-line 451, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts first letter of the string to uppercase."}, parse-number-impl {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 388, :column 8, :end-line 388, :end-column 25, :private true, :arglists (quote ([source]))}, :private true, :name cuerdas.core/parse-number-impl, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 25, :method-params ([source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 388, :end-line 388, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source]))}, reverse {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 380, :column 7, :end-line 380, :end-column 14, :arglists (quote ([s])), :doc "Return string reversed."}, :name cuerdas.core/reverse, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 380, :end-line 380, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return string reversed."}, join {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 248, :column 7, :end-line 248, :end-column 11, :arglists (quote ([coll] [separator coll])), :doc "Joins strings together with given separator.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [separator coll]), :arglists ([coll] [separator coll]), :arglists-meta (nil nil)}}, :name cuerdas.core/join, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [separator coll]), :arglists ([coll] [separator coll]), :arglists-meta (nil nil)}, :method-params ([coll] [separator coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 2, :fn-var true, :arglists ([coll] [separator coll]), :doc "Joins strings together with given separator."}, replace-first {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 171, :column 7, :end-line 171, :end-column 20, :arglists (quote ([s match replacement])), :doc "Replaces first instance of match with replacement in s."}, :name cuerdas.core/replace-first, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 20, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement])), :doc "Replaces first instance of match with replacement in s."}, clean {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 329, :column 7, :end-line 329, :end-column 12, :arglists (quote ([s])), :doc "Trim and replace multiple spaces with\n  a single space."}, :name cuerdas.core/clean, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 329, :end-line 329, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Trim and replace multiple spaces with\n  a single space."}, rtrim {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 193, :column 7, :end-line 193, :end-column 12, :arglists (quote ([s] [s chs])), :doc "Removes whitespace or specified characters\n  from right side of string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}}, :name cuerdas.core/rtrim, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}, :method-params ([s] [s chs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s chs]), :doc "Removes whitespace or specified characters\n  from right side of string."}, startswith? {:name cuerdas.core/startswith?, :file "resources/js/out/cuerdas/core.cljs", :line 69, :column 1, :end-line 69, :end-column 17, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 69, :column 6, :end-line 69, :end-column 17}}, starts-with? {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 55, :column 7, :end-line 55, :end-column 19, :arglists (quote ([s prefix])), :doc "Check if the string starts with prefix."}, :name cuerdas.core/starts-with?, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 19, :method-params ([s prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s prefix])), :doc "Check if the string starts with prefix."}, ireplace-first {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 177, :column 7, :end-line 177, :end-column 21, :arglists (quote ([s match replacement])), :doc "Replaces first instance of match with replacement in s."}, :name cuerdas.core/ireplace-first, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 21, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement])), :doc "Replaces first instance of match with replacement in s."}, rstrip {:name cuerdas.core/rstrip, :file "resources/js/out/cuerdas/core.cljs", :line 214, :column 1, :end-line 214, :end-column 12, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 214, :column 6, :end-line 214, :end-column 12}}, upper {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 78, :column 7, :end-line 78, :end-column 12, :arglists (quote ([s])), :doc "Converts string to all upper-case."}, :name cuerdas.core/upper, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts string to all upper-case."}, classify {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 505, :column 7, :end-line 505, :end-column 15, :arglists (quote ([s])), :doc "Converts string to camelized class name. First letter is always upper case."}, :name cuerdas.core/classify, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 505, :end-line 505, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts string to camelized class name. First letter is always upper case."}, format {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 424, :column 7, :end-line 424, :end-column 13, :arglists (quote ([s & args])), :doc "Simple string interpolation.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s args)], :arglists ([s & args]), :arglists-meta (nil)}}, :name cuerdas.core/format, :variadic true, :file "resources/js/out/cuerdas/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s args)], :arglists ([s & args]), :arglists-meta (nil)}, :method-params [(s args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 424, :end-line 424, :max-fixed-arity 1, :fn-var true, :arglists ([s & args]), :doc "Simple string interpolation."}, ltrim {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 203, :column 7, :end-line 203, :end-column 12, :arglists (quote ([s] [s chs])), :doc "Removes whitespace or specified characters\n  from left side of string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}}, :name cuerdas.core/ltrim, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}, :method-params ([s] [s chs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s chs]), :doc "Removes whitespace or specified characters\n  from left side of string."}, empty? {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 94, :column 7, :end-line 94, :end-column 13, :arglists (quote ([s])), :doc "Checks if a string is empty."}, :name cuerdas.core/empty?, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Checks if a string is empty."}, ireplace {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 165, :column 7, :end-line 165, :end-column 15, :arglists (quote ([s match replacement])), :doc "Replaces all instance of match with replacement in s."}, :name cuerdas.core/ireplace, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 15, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement])), :doc "Replaces all instance of match with replacement in s."}, replace {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 159, :column 7, :end-line 159, :end-column 14, :arglists (quote ([s match replacement])), :doc "Replaces all instance of match with replacement in s."}, :name cuerdas.core/replace, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 14, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement])), :doc "Replaces all instance of match with replacement in s."}, slugify {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 286, :column 7, :end-line 286, :end-column 14, :arglists (quote ([s])), :doc "Transform text into a URL slug."}, :name cuerdas.core/slugify, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 286, :end-line 286, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Transform text into a URL slug."}, escape-regexp {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 49, :column 7, :end-line 49, :end-column 20, :arglists (quote ([s])), :doc "Escapes characters in the string that are not safe\n  to use in a RegExp."}, :name cuerdas.core/escape-regexp, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Escapes characters in the string that are not safe\n  to use in a RegExp."}, humanize {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 486, :column 7, :end-line 486, :end-column 15, :arglists (quote ([s])), :doc "Converts an underscored, camelized, or\n  dasherized string into a humanized one."}, :name cuerdas.core/humanize, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 486, :end-line 486, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts an underscored, camelized, or\n  dasherized string into a humanized one."}, underscored {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 476, :column 7, :end-line 476, :end-column 18, :arglists (quote ([s])), :doc "Converts a camelized or dasherized string\n  into an underscored one."}, :name cuerdas.core/underscored, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 476, :end-line 476, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts a camelized or dasherized string\n  into an underscored one."}, dasherize {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 465, :column 7, :end-line 465, :end-column 16, :arglists (quote ([s])), :doc "Converts a underscored or camelized string\n  into an dasherized one."}, :name cuerdas.core/dasherize, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 465, :end-line 465, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts a underscored or camelized string\n  into an dasherized one."}, camelize {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 457, :column 7, :end-line 457, :end-column 15, :arglists (quote ([s])), :doc "Converts a string from selector-case to camelCase."}, :name cuerdas.core/camelize, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 457, :end-line 457, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts a string from selector-case to camelCase."}, unquote {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 278, :column 7, :end-line 278, :end-column 14, :arglists (quote ([s] [s qchar])), :doc "Unquote a string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s qchar]), :arglists ([s] [s qchar]), :arglists-meta (nil nil)}}, :name cuerdas.core/unquote, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s qchar]), :arglists ([s] [s qchar]), :arglists-meta (nil nil)}, :method-params ([s] [s qchar]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s qchar]), :doc "Unquote a string."}, parse-float {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 406, :column 7, :end-line 406, :end-column 18, :arglists (quote ([s] [s precision])), :doc "Return the float value, wraps parseFloat.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s precision]), :arglists ([s] [s precision]), :arglists-meta (nil nil)}}, :name cuerdas.core/parse-float, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s precision]), :arglists ([s] [s precision]), :arglists-meta (nil nil)}, :method-params ([s] [s precision]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 406, :end-line 406, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s precision]), :doc "Return the float value, wraps parseFloat."}, unlines {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 137, :column 7, :end-line 137, :end-column 14, :arglists (quote ([s])), :doc "Returns a new string joining a list of strings with a newline char (\\n)."}, :name cuerdas.core/unlines, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns a new string joining a list of strings with a newline char (\\n)."}, substr-between {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 515, :column 7, :end-line 515, :end-column 21, :arglists (quote ([s prefix suffix])), :doc "Find string that is nested in between two strings. Return first match"}, :name cuerdas.core/substr-between, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 21, :method-params ([s prefix suffix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 515, :end-line 515, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s prefix suffix])), :doc "Find string that is nested in between two strings. Return first match"}, lines {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 132, :column 7, :end-line 132, :end-column 12, :arglists (quote ([s])), :doc "Return a list of the lines in the string."}, :name cuerdas.core/lines, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return a list of the lines in the string."}, strip-tags-impl {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 300, :column 8, :end-line 300, :end-column 23, :private true, :arglists (quote ([s tags mappings]))}, :private true, :name cuerdas.core/strip-tags-impl, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 23, :method-params ([s tags mappings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s tags mappings]))}, strip-suffix {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 224, :column 7, :end-line 224, :end-column 19, :arglists (quote ([s prefix])), :doc "Strip suffix in more efficient way."}, :name cuerdas.core/strip-suffix, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 19, :method-params ([s prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s prefix])), :doc "Strip suffix in more efficient way."}, strip-prefix {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 217, :column 7, :end-line 217, :end-column 19, :arglists (quote ([s prefix])), :doc "Strip prefix in more efficient way."}, :name cuerdas.core/strip-prefix, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 19, :method-params ([s prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s prefix])), :doc "Strip prefix in more efficient way."}, unsurround {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 261, :column 7, :end-line 261, :end-column 17, :arglists (quote ([s surrounding])), :doc "Unsurround a string surrounded by another."}, :name cuerdas.core/unsurround, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 17, :method-params ([s surrounding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 261, :end-line 261, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s surrounding])), :doc "Unsurround a string surrounded by another."}, strip-newlines {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 114, :column 7, :end-line 114, :end-column 21, :arglists (quote ([s])), :doc "Takes a string and replaces newlines with a space.\n  Multiple lines are replaced with a single space."}, :name cuerdas.core/strip-newlines, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Takes a string and replaces newlines with a space.\n  Multiple lines are replaced with a single space."}, surround {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 255, :column 7, :end-line 255, :end-column 15, :arglists (quote ([s wrap])), :doc "Surround a string with another string."}, :name cuerdas.core/surround, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 15, :method-params ([s wrap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s wrap])), :doc "Surround a string with another string."}, regexp {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 38, :column 8, :end-line 38, :end-column 14, :private true, :arglists (quote ([s] [s flags])), :doc "Build or derive regexp instance.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s flags]), :arglists ([s] [s flags]), :arglists-meta (nil nil)}}, :private true, :name cuerdas.core/regexp, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s flags]), :arglists ([s] [s flags]), :arglists-meta (nil nil)}, :method-params ([s] [s flags]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s flags]), :doc "Build or derive regexp instance."}, strip-tags {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 319, :column 7, :end-line 319, :end-column 17, :arglists (quote ([s] [s tags] [s tags mapping])), :doc "Remove html tags from string.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [s tags] [s tags mapping]), :arglists ([s] [s tags] [s tags mapping]), :arglists-meta (nil nil nil)}}, :name cuerdas.core/strip-tags, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [s tags] [s tags mapping]), :arglists ([s] [s tags] [s tags mapping]), :arglists-meta (nil nil nil)}, :method-params ([s] [s tags] [s tags mapping]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 3, :fn-var true, :arglists ([s] [s tags] [s tags mapping]), :doc "Remove html tags from string."}, split {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 120, :column 7, :end-line 120, :end-column 12, :arglists (quote ([s] [s sep] [s sep num])), :doc "Splits a string on a separator a limited\n  number of times. The separator can be a string\n  or RegExp instance.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [s sep] [s sep num]), :arglists ([s] [s sep] [s sep num]), :arglists-meta (nil nil nil)}}, :name cuerdas.core/split, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [s sep] [s sep num]), :arglists ([s] [s sep] [s sep num]), :arglists-meta (nil nil nil)}, :method-params ([s] [s sep] [s sep num]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 3, :fn-var true, :arglists ([s] [s sep] [s sep num]), :doc "Splits a string on a separator a limited\n  number of times. The separator can be a string\n  or RegExp instance."}, quote {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 273, :column 7, :end-line 273, :end-column 12, :arglists (quote ([s] [s qchar])), :doc "Quotes a string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s qchar]), :arglists ([s] [s qchar]), :arglists-meta (nil nil)}}, :name cuerdas.core/quote, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s qchar]), :arglists ([s] [s qchar]), :arglists-meta (nil nil)}, :method-params ([s] [s qchar]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 273, :end-line 273, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s qchar]), :doc "Quotes a string."}, chars {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 144, :column 7, :end-line 144, :end-column 12, :arglists (quote ([s])), :doc "Split a string in a seq of chars."}, :name cuerdas.core/chars, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Split a string in a seq of chars."}, pad {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 435, :column 7, :end-line 435, :end-column 10, :arglists (quote ([s & [{:keys [length padding type], :or {length 0, padding " ", type :left}}]])), :doc "Pads the str with characters until the total string\n  length is equal to the passed length parameter. By\n  default, pads on the left with the space char.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [{:keys [length padding type], :or {length 0, padding " ", type :left}}])], :arglists ([s & [{:keys [length padding type], :or {length 0, padding " ", type :left}}]]), :arglists-meta (nil)}}, :name cuerdas.core/pad, :variadic true, :file "resources/js/out/cuerdas/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [{:keys [length padding type], :or {length 0, padding " ", type :left}}])], :arglists ([s & [{:keys [length padding type], :or {length 0, padding " ", type :left}}]]), :arglists-meta (nil)}, :method-params [(s [{:keys [length padding type], :or {length 0, padding " ", type :left}}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 435, :end-line 435, :max-fixed-arity 1, :fn-var true, :arglists ([s & [{:keys [length padding type], :or {length 0, padding " ", type :left}}]]), :doc "Pads the str with characters until the total string\n  length is equal to the passed length parameter. By\n  default, pads on the left with the space char."}, unescape-html {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 371, :column 7, :end-line 371, :end-column 20, :arglists (quote ([s])), :doc "Converts entity characters to HTML equivalents."}, :name cuerdas.core/unescape-html, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 371, :end-line 371, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts entity characters to HTML equivalents."}, parse-int {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 416, :column 7, :end-line 416, :end-column 16, :arglists (quote ([s])), :doc "Return the number value in integer form."}, :name cuerdas.core/parse-int, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 416, :end-line 416, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return the number value in integer form."}, slice {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 150, :column 7, :end-line 150, :end-column 12, :arglists (quote ([s begin] [s begin end])), :doc "Extracts a section of a string and returns a new string.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s begin] [s begin end]), :arglists ([s begin] [s begin end]), :arglists-meta (nil nil)}}, :name cuerdas.core/slice, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s begin] [s begin end]), :arglists ([s begin] [s begin end]), :arglists-meta (nil nil)}, :method-params ([s begin] [s begin end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 3, :fn-var true, :arglists ([s begin] [s begin end]), :doc "Extracts a section of a string and returns a new string."}, reversed-html-escape-chars {:name cuerdas.core/reversed-html-escape-chars, :file "resources/js/out/cuerdas/core.cljs", :line 343, :column 1, :end-line 343, :end-column 32, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 343, :column 6, :end-line 343, :end-column 32}}, escape-html {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 348, :column 7, :end-line 348, :end-column 18, :arglists (quote ([s]))}, :name cuerdas.core/escape-html, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, prune {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 231, :column 7, :end-line 231, :end-column 12, :arglists (quote ([s num] [s num subs])), :doc "Truncates a string to a certain length and adds '...'\n  if necessary.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s num] [s num subs]), :arglists ([s num] [s num subs]), :arglists-meta (nil nil)}}, :name cuerdas.core/prune, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s num] [s num subs]), :arglists ([s num] [s num subs]), :arglists-meta (nil nil)}, :method-params ([s num] [s num subs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 3, :fn-var true, :arglists ([s num] [s num subs]), :doc "Truncates a string to a certain length and adds '...'\n  if necessary."}, lower {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 72, :column 7, :end-line 72, :end-column 12, :arglists (quote ([s])), :doc "Converts string to all lower-case."}, :name cuerdas.core/lower, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts string to all lower-case."}, endswith? {:name cuerdas.core/endswith?, :file "resources/js/out/cuerdas/core.cljs", :line 70, :column 1, :end-line 70, :end-column 15, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 70, :column 6, :end-line 70, :end-column 15}}, trim {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 183, :column 7, :end-line 183, :end-column 11, :arglists (quote ([s] [s chs])), :doc "Removes whitespace or specified characters\n  from both ends of string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}}, :name cuerdas.core/trim, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}, :method-params ([s] [s chs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s chs]), :doc "Removes whitespace or specified characters\n  from both ends of string."}, repeat {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 107, :column 7, :end-line 107, :end-column 13, :arglists (quote ([s] [s n])), :doc "Repeats string n times.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s n]), :arglists ([s] [s n]), :arglists-meta (nil nil)}}, :name cuerdas.core/repeat, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s n]), :arglists ([s] [s n]), :arglists-meta (nil nil)}, :method-params ([s] [s n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s n]), :doc "Repeats string n times."}, strip {:name cuerdas.core/strip, :file "resources/js/out/cuerdas/core.cljs", :line 213, :column 1, :end-line 213, :end-column 11, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 213, :column 6, :end-line 213, :end-column 11}}, blank? {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 102, :column 7, :end-line 102, :end-column 13, :arglists (quote ([s])), :doc "Checks if a string is empty or contains only whitespaces."}, :name cuerdas.core/blank?, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Checks if a string is empty or contains only whitespaces."}, parse-number {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/resources/js/out/cuerdas/core.cljs", :line 392, :column 7, :end-line 392, :end-column 19, :arglists (quote ([s] [s precision])), :doc "General purpose function for parse number like\n  string to number. It works with both: integers\n  and floats.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s precision]), :arglists ([s] [s precision]), :arglists-meta (nil nil)}}, :name cuerdas.core/parse-number, :variadic false, :file "resources/js/out/cuerdas/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s precision]), :arglists ([s] [s precision]), :arglists-meta (nil nil)}, :method-params ([s] [s precision]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 392, :end-line 392, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s precision]), :doc "General purpose function for parse number like\n  string to number. It works with both: integers\n  and floats."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :type :padding :length :right :both :left}, :order [:else :length :padding :type :left :right :both]}, :doc nil}