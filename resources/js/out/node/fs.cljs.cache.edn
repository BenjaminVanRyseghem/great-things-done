;; Analyzed by ClojureScript 1.7.122
{:name node.fs, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil, :defs {mkdir! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/node/fs.cljs", :line 20, :column 7, :end-line 20, :end-column 13, :arglists (quote ([path & [mode callback]])), :doc "mkdir(2). `mode` defaults to `0777`. If `callback` is provided, the execution is asynchronous and `callback` is invoked with no arguments other than a possible exception.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [mode callback])], :arglists ([path & [mode callback]]), :arglists-meta (nil)}}, :name node.fs/mkdir!, :variadic true, :file "src/node/fs.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [mode callback])], :arglists ([path & [mode callback]]), :arglists-meta (nil)}, :method-params [(path [mode callback])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists ([path & [mode callback]]), :doc "mkdir(2). `mode` defaults to `0777`. If `callback` is provided, the execution is asynchronous and `callback` is invoked with no arguments other than a possible exception."}, fs {:name node.fs/fs, :file "src/node/fs.cljs", :line 5, :column 1, :end-line 5, :end-column 18, :private true, :meta {:file "/Users/benjamin/projects/great-things-done/src/node/fs.cljs", :line 5, :column 16, :end-line 5, :end-column 18, :private true}}, unlink! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/node/fs.cljs", :line 51, :column 7, :end-line 51, :end-column 14, :arglists (quote ([path & [callback]])), :doc "Synchronous unlink(2). If `callback` is provided the execution is asynchronous.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [callback])], :arglists ([path & [callback]]), :arglists-meta (nil)}}, :name node.fs/unlink!, :variadic true, :file "src/node/fs.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [callback])], :arglists ([path & [callback]]), :arglists-meta (nil)}, :method-params [(path [callback])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists ([path & [callback]]), :doc "Synchronous unlink(2). If `callback` is provided the execution is asynchronous."}, rename! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/node/fs.cljs", :line 44, :column 7, :end-line 44, :end-column 14, :arglists (quote ([old-path new-path & [callback]])), :doc "Synchronous rename(2). If `callback` is provided the execution is asynchronous.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(old-path new-path [callback])], :arglists ([old-path new-path & [callback]]), :arglists-meta (nil)}}, :name node.fs/rename!, :variadic true, :file "src/node/fs.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(old-path new-path [callback])], :arglists ([old-path new-path & [callback]]), :arglists-meta (nil)}, :method-params [(old-path new-path [callback])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists ([old-path new-path & [callback]]), :doc "Synchronous rename(2). If `callback` is provided the execution is asynchronous."}, ensure-dir! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/node/fs.cljs", :line 85, :column 7, :end-line 85, :end-column 18, :arglists (quote ([path & [callback]])), :doc "Ensure tha provided `path` exists on disk. If `callback` is provided, the execution is asynchronous.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [callback])], :arglists ([path & [callback]]), :arglists-meta (nil)}}, :name node.fs/ensure-dir!, :variadic true, :file "src/node/fs.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [callback])], :arglists ([path & [callback]]), :arglists-meta (nil)}, :method-params [(path [callback])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists ([path & [callback]]), :doc "Ensure tha provided `path` exists on disk. If `callback` is provided, the execution is asynchronous."}, path-exists? {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/node/fs.cljs", :line 13, :column 7, :end-line 13, :end-column 19, :arglists (quote ([path & [callback]])), :doc "Test whether or not the given path exists by checking the file system. If `callback` is provided, the execution is asynchronous and `callback` is invoked with either true or false.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [callback])], :arglists ([path & [callback]]), :arglists-meta (nil)}}, :name node.fs/path-exists?, :variadic true, :file "src/node/fs.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [callback])], :arglists ([path & [callback]]), :arglists-meta (nil)}, :method-params [(path [callback])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists ([path & [callback]]), :doc "Test whether or not the given path exists by checking the file system. If `callback` is provided, the execution is asynchronous and `callback` is invoked with either true or false."}, rm-dir! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/node/fs.cljs", :line 72, :column 7, :end-line 72, :end-column 14, :arglists (quote ([path & [callback]])), :doc "Synchronous rmdir(2). If `callback` is provided the execution is asynchronous.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [callback])], :arglists ([path & [callback]]), :arglists-meta (nil)}}, :name node.fs/rm-dir!, :variadic true, :file "src/node/fs.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [callback])], :arglists ([path & [callback]]), :arglists-meta (nil)}, :method-params [(path [callback])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists ([path & [callback]]), :doc "Synchronous rmdir(2). If `callback` is provided the execution is asynchronous."}, read-dir {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/node/fs.cljs", :line 58, :column 7, :end-line 58, :end-column 15, :arglists (quote ([path & [callback]])), :doc "Synchronous readdir(3). Returns an array of filenames excluding '.' and '..'. If `callback` is provided the execution is asynchronous.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [callback])], :arglists ([path & [callback]]), :arglists-meta (nil)}}, :name node.fs/read-dir, :variadic true, :file "src/node/fs.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [callback])], :arglists ([path & [callback]]), :arglists-meta (nil)}, :method-params [(path [callback])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists ([path & [callback]]), :doc "Synchronous readdir(3). Returns an array of filenames excluding '.' and '..'. If `callback` is provided the execution is asynchronous."}, write-file! {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/node/fs.cljs", :line 27, :column 7, :end-line 27, :end-column 18, :arglists (quote ([filename data & [options callback]])), :doc "Write data to a file, replacing the file if it already exists. data can be a string or a buffer.\n\nThe encoding option is ignored if data is a buffer. It defaults to 'utf8'.\n\n  - `filename` String\n  - `data` String | Buffer\n  - `options` Object\n    - `encoding` String | Null default = 'utf8'\n    - `mode` Number default = 438 (aka 0666 in Octal)\n  - `flag` String default = 'w'\n  - `callback` Function", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(filename data [options callback])], :arglists ([filename data & [options callback]]), :arglists-meta (nil)}}, :name node.fs/write-file!, :variadic true, :file "src/node/fs.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(filename data [options callback])], :arglists ([filename data & [options callback]]), :arglists-meta (nil)}, :method-params [(filename data [options callback])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists ([filename data & [options callback]]), :doc "Write data to a file, replacing the file if it already exists. data can be a string or a buffer.\n\nThe encoding option is ignored if data is a buffer. It defaults to 'utf8'.\n\n  - `filename` String\n  - `data` String | Buffer\n  - `options` Object\n    - `encoding` String | Null default = 'utf8'\n    - `mode` Number default = 438 (aka 0666 in Octal)\n  - `flag` String default = 'w'\n  - `callback` Function"}, read-file {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/node/fs.cljs", :line 65, :column 7, :end-line 65, :end-column 16, :arglists (quote ([path & [options callback]])), :doc "Synchronously reads the entire contents of a file. If `callback` is provided the execution is asynchronous.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [options callback])], :arglists ([path & [options callback]]), :arglists-meta (nil)}}, :name node.fs/read-file, :variadic true, :file "src/node/fs.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [options callback])], :arglists ([path & [options callback]]), :arglists-meta (nil)}, :method-params [(path [options callback])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists ([path & [options callback]]), :doc "Synchronously reads the entire contents of a file. If `callback` is provided the execution is asynchronous."}}}