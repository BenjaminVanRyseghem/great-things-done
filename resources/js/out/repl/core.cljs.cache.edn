;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name repl.core, :imports nil, :requires {string cuerdas.core, cuerdas.core cuerdas.core, state gtd.state, gtd.state gtd.state}, :uses nil, :defs {custom-eval {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/repl/core.cljs", :line 66, :column 8, :end-line 66, :end-column 19, :private true, :arglists (quote ([cmd context filename callback]))}, :private true, :name repl.core/custom-eval, :variadic false, :file "src/repl/core.cljs", :end-column 19, :method-params ([cmd context filename callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cmd context filename callback]))}, remote {:name repl.core/remote, :file "src/repl/core.cljs", :line 6, :column 1, :end-line 6, :end-column 12, :meta {:file "/Users/benjamin/projects/great-things-done/src/repl/core.cljs", :line 6, :column 6, :end-line 6, :end-column 12}}, init-tcp-cli {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/repl/core.cljs", :line 103, :column 7, :end-line 103, :end-column 19, :arglists (quote ([& {:keys [port addr], :or {port 5002, addr "localhost"}}])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [port addr], :or {port 5002, addr "localhost"}})], :arglists ([& {:keys [port addr], :or {port 5002, addr "localhost"}}]), :arglists-meta (nil)}}, :name repl.core/init-tcp-cli, :variadic true, :file "src/repl/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [port addr], :or {port 5002, addr "localhost"}})], :arglists ([& {:keys [port addr], :or {port 5002, addr "localhost"}}]), :arglists-meta (nil)}, :method-params [({:keys [port addr], :or {port 5002, addr "localhost"}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [port addr], :or {port 5002, addr "localhost"}}])}, create-server {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/repl/core.cljs", :line 73, :column 8, :end-line 73, :end-column 21, :private true, :arglists (quote ([prompt]))}, :private true, :name repl.core/create-server, :variadic false, :file "src/repl/core.cljs", :end-column 21, :method-params ([prompt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([prompt]))}, init-file-repl {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/repl/core.cljs", :line 96, :column 7, :end-line 96, :end-column 21, :arglists (quote ([prompt & {:keys [port], :or {port "/tmp/gtd-repl-sock"}}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(prompt {:keys [port], :or {port "/tmp/gtd-repl-sock"}})], :arglists ([prompt & {:keys [port], :or {port "/tmp/gtd-repl-sock"}}]), :arglists-meta (nil)}}, :name repl.core/init-file-repl, :variadic true, :file "src/repl/core.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(prompt {:keys [port], :or {port "/tmp/gtd-repl-sock"}})], :arglists ([prompt & {:keys [port], :or {port "/tmp/gtd-repl-sock"}}]), :arglists-meta (nil)}, :method-params [(prompt {:keys [port], :or {port "/tmp/gtd-repl-sock"}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists ([prompt & {:keys [port], :or {port "/tmp/gtd-repl-sock"}}])}, format-projects {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/repl/core.cljs", :line 26, :column 8, :end-line 26, :end-column 23, :private true, :arglists (quote ([projects]))}, :private true, :name repl.core/format-projects, :variadic false, :file "src/repl/core.cljs", :end-column 23, :method-params ([projects]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([projects]))}, init-tcp-repl {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/repl/core.cljs", :line 87, :column 7, :end-line 87, :end-column 20, :arglists (quote ([prompt & {:keys [port addr], :or {port 5001, addr "localhost"}}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(prompt {:keys [port addr], :or {port 5001, addr "localhost"}})], :arglists ([prompt & {:keys [port addr], :or {port 5001, addr "localhost"}}]), :arglists-meta (nil)}}, :name repl.core/init-tcp-repl, :variadic true, :file "src/repl/core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(prompt {:keys [port addr], :or {port 5001, addr "localhost"}})], :arglists ([prompt & {:keys [port addr], :or {port 5001, addr "localhost"}}]), :arglists-meta (nil)}, :method-params [(prompt {:keys [port addr], :or {port 5001, addr "localhost"}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists ([prompt & {:keys [port addr], :or {port 5001, addr "localhost"}}])}, net {:name repl.core/net, :file "src/repl/core.cljs", :line 7, :column 1, :end-line 7, :end-column 9, :meta {:file "/Users/benjamin/projects/great-things-done/src/repl/core.cljs", :line 7, :column 6, :end-line 7, :end-column 9}}, eval-repl {:name repl.core/eval-repl, :file "src/repl/core.cljs", :line 50, :column 1, :end-line 50, :end-column 20, :meta {:file "/Users/benjamin/projects/great-things-done/src/repl/core.cljs", :line 50, :column 11, :end-line 50, :end-column 20}}, fill-string {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/repl/core.cljs", :line 16, :column 8, :end-line 16, :end-column 19, :private true, :arglists (quote ([length & {:keys [base], :or [base ""]}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(length {:keys [base], :or [base ""]})], :arglists ([length & {:keys [base], :or [base ""]}]), :arglists-meta (nil)}}, :private true, :name repl.core/fill-string, :variadic true, :file "src/repl/core.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(length {:keys [base], :or [base ""]})], :arglists ([length & {:keys [base], :or [base ""]}]), :arglists-meta (nil)}, :method-params [(length {:keys [base], :or [base ""]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists ([length & {:keys [base], :or [base ""]}])}, repl {:name repl.core/repl, :file "src/repl/core.cljs", :line 8, :column 1, :end-line 8, :end-column 10, :meta {:file "/Users/benjamin/projects/great-things-done/src/repl/core.cljs", :line 8, :column 6, :end-line 8, :end-column 10}}, split-cmd {:protocol-inline nil, :meta {:file "/Users/benjamin/projects/great-things-done/src/repl/core.cljs", :line 45, :column 8, :end-line 45, :end-column 17, :private true, :arglists (quote ([string]))}, :private true, :name repl.core/split-cmd, :variadic false, :file "src/repl/core.cljs", :end-column 17, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{pos? :default :name :output :port :addr :prompt :id :input :base :hierarchy length :eval}, :order [:base pos? length :id :name :hierarchy :default :prompt :input :output :eval :port :addr]}, :doc "See doc https://nodejs.org/api/repl.html"}